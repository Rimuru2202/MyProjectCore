using UnityEngine;
using System.Collections;

public class TorchSound : MonoBehaviour
{
    [Header("üî• –ó–≤—É–∫–∏ —Ñ–∞–∫–µ–ª–∞")]
    public AudioClip torchLoop; // –î–ª–∏–Ω–Ω—ã–π –∑–≤—É–∫ –≥–æ—Ä–µ–Ω–∏—è —Ñ–∞–∫–µ–ª–∞ (1 –º–∏–Ω—É—Ç–∞)

    [Header("üéõ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞")]
    public float fadeDuration = 2f; // –í—Ä–µ–º—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞

    [Header("üîä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 3D-–∑–≤—É–∫–∞")]
    public float minDistance = 1f;  // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
    public float maxDistance = 5f;  // –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—á–µ–∑–∞–µ—Ç
    public bool debugMode = false;  // –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏

    private AudioSource audioSource1;
    private AudioSource audioSource2;
    private bool isPlayingFirst = true;
    private Transform player; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞

    private void Start()
    {
        player = Camera.main.transform; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç)

        // –°–æ–∑–¥–∞—ë–º –¥–≤–∞ AudioSource –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        audioSource1 = gameObject.AddComponent<AudioSource>();
        audioSource2 = gameObject.AddComponent<AudioSource>();

        ConfigureAudioSource(audioSource1);
        ConfigureAudioSource(audioSource2);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        StartCoroutine(PlayTorchLoop());
    }

    private void ConfigureAudioSource(AudioSource source)
    {
        source.clip = torchLoop;
        source.loop = false;
        source.spatialBlend = 1.0f; // 100% 3D-–∑–≤—É–∫
        source.volume = 0f;
        source.playOnAwake = false;
        source.rolloffMode = AudioRolloffMode.Linear; // –õ–∏–Ω–µ–π–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—á–µ–∑–∞–µ—Ç –Ω–∞ maxDistance)
        source.minDistance = minDistance;
        source.maxDistance = maxDistance;
        source.dopplerLevel = 0f; // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –î–æ–ø–ª–µ—Ä–∞
    }

    private IEnumerator PlayTorchLoop()
    {
        while (true)
        {
            AudioSource activeSource = isPlayingFirst ? audioSource1 : audioSource2;
            AudioSource fadingOutSource = isPlayingFirst ? audioSource2 : audioSource1;

            activeSource.Play();
            StartCoroutine(FadeIn(activeSource));
            StartCoroutine(FadeOut(fadingOutSource));

            yield return new WaitForSeconds(torchLoop.length - fadeDuration);

            isPlayingFirst = !isPlayingFirst;
        }
    }

    private IEnumerator FadeIn(AudioSource source)
    {
        float timer = 0f;
        while (timer < fadeDuration)
        {
            source.volume = Mathf.Lerp(0f, GetVolumeByDistance(), timer / fadeDuration);
            timer += Time.deltaTime;
            yield return null;
        }
        source.volume = GetVolumeByDistance();
    }

    private IEnumerator FadeOut(AudioSource source)
    {
        float timer = 0f;
        while (timer < fadeDuration)
        {
            source.volume = Mathf.Lerp(source.volume, 0f, timer / fadeDuration);
            timer += Time.deltaTime;
            yield return null;
        }
        source.volume = 0f;
        source.Stop();
    }

    private float GetVolumeByDistance()
    {
        if (player == null) return 0f;

        float distance = Vector3.Distance(player.position, transform.position);
        if (distance >= maxDistance) return 0f;
        if (distance <= minDistance) return 0.5f;

        return 1f - ((distance - minDistance) / (maxDistance - minDistance));
    }

    private void Update()
    {
        float volume = GetVolumeByDistance();
        if (isPlayingFirst)
        {
            audioSource1.volume = volume;
        }
        else
        {
            audioSource2.volume = volume;
        }

        if (debugMode)
        {
            Debug.Log($"üî• –§–∞–∫–µ–ª: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {Vector3.Distance(player.position, transform.position):F2}, –≥—Ä–æ–º–∫–æ—Å—Ç—å = {volume:F2}");
        }
    }
}
